from flask import Flask, request, send_file
from PIL import Image
import io
import os
from faker import Faker

app = Flask(__name__)
fake = Faker()

# Ensure the directory for saving converted images exists
os.makedirs('converted_images', exist_ok=True)

# Common style and navbar for the application
common_style = '''
<style>
    body {font-family: 'Arial', sans-serif; margin: 0; padding: 0; background: #f7f7f7; color: #333;}
    .navbar {list-style-type: none; margin: 0; padding: 0; overflow: hidden; background-color: #333;}
    .navbar li {float: left;}
    .navbar li a {display: block; color: white; text-align: center; padding: 14px 16px; text-decoration: none;}
    .navbar li a:hover {background-color: #111;}
    .container {padding: 20px;}
    .content {max-width: 800px; margin: 40px auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);}
    h1, h2 {color: #5a5a5a;}
    p {line-height: 1.6;}
    a {color: #007bff; text-decoration: none;}
    a:hover {text-decoration: underline;}
    form {margin-top: 20px;}
    label {margin-top: 10px;}
    input, select, button {margin-top: 5px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; width: calc(100% - 22px); margin-bottom: 20px;}
    button {background-color: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer;}
    button:hover {background-color: #218838;}
</style>
'''

navbar_html = '''
<ul class="navbar">
    <li><a href="/">Home</a></li>
    <li><a href="/convert">Convert Image</a></li>
    <li><a href="/generate_fake_data">Generate Fake Data</a></li>
</ul>
'''

@app.route('/')
def index():
    return f'''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Image Converter & Data Generator App</title>
        {common_style}
    </head>
    <body>
        {navbar_html}
          <div class="container">
            <div class="content">
                <h1>Welcome to the Image Converter & Data Generator App</h1>
                <p>This app provides two main features:</p>
                
                <h2>Image Conversion</h2>
                <p>Convert your images to various formats with ease. This tool supports conversion to JPEG, PNG, BMP, and GIF formats. To convert an image:</p>
                <ol>
                    <li>Visit the <a href="/convert">Convert</a> page.</li>
                    <li>Upload the image you wish to convert.</li>
                    <li>Select the desired output format.</li>
                    <li>Submit the form, and your converted image will be downloaded automatically.</li>
                </ol>
                
                 <h2>Data Generation</h2>
                <p>Easily generate fake data for testing or development purposes. You can customize the data generated by selecting different categories. Here's how to use it:</p>
                <ol>
                    <li>Navigate to the <a href="/generate_fake_data">Generate Fake Data</a> page.</li>
                    <li>Choose the categories of data you wish to generate. The available categories include Name, Address, Email, Company, and Text.</li>
                    <li>Submit the form to see the generated data displayed on the screen.</li>
                    <li>If you perform a POST request with specific categories selected, only the data for those categories will be generated and displayed.</li>
                </ol>
            </div>
        </div>
    </body>
    </html>
'''

# Define the convert route

# Ensure the directory for saving converted images exists
os.makedirs('converted_images', exist_ok=True)

@app.route('/convert', methods=['GET', 'POST'])
def convert_image():
    if request.method == 'POST':
        # Check if the post request has the file part
        if 'file' not in request.files:
            return 'No file part in the request', 400
        file = request.files['file']
        output_format = request.form.get('format', '').lower()
        
        # Normalize jpg and jpeg
        if output_format == 'jpg':
            output_format = 'jpeg'
        
        # Validate file and format
        if file.filename == '':
            return 'No file selected for uploading', 400
        if output_format not in ['jpeg', 'png', 'bmp', 'gif']:
            return 'Unsupported file format', 400
        
        # Convert and save the image
        img = Image.open(file.stream)
        save_path = os.path.join('converted_images', f'converted.{output_format}')
        img.save(save_path, output_format.upper())

        # Return a success message with the file path
        return f'The image has been converted and saved to {save_path}', 200

    else:
        return f'''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Convert Image</title>
            {common_style}
        </head>
        <body>
            {navbar_html}
            <div class="container">
                <div class="content">
                    <h1>Image Conversion</h1>
                    <form action="/convert" method="post" enctype="multipart/form-data">
                        <label for="file">Choose image to convert:</label>
                        <input type="file" id="file" name="file" required><br><br>
                        <label for="format">Output format:</label>
                        <select name="format" id="format">
                            <option value="jpeg">JPEG</option>
                            <option value="png">PNG</option>
                            <option value="bmp">BMP</option>
                            <option value="gif">GIF</option>
                        </select><br><br>
                        <button type="submit">Convert Image</button>
                    </form>
                </div>
            </div>
        </body>
        </html>
        '''

@app.route('/generate_fake_data', methods=['GET', 'POST'])
def generate_fake_data():
    # Available categories and their corresponding Faker methods
    category_to_faker = {
        'Name': fake.name,
        'Address': fake.address,
        'Email': fake.email,
        'Company': fake.company,
        'Text': fake.text,
    }

    if request.method == 'POST':
        # User selected categories from the form
        selected_categories = request.form.getlist('category')
    else:
        # Default to a predefined list if no categories are specified or if it's a GET request
        selected_categories = ['name', 'address', 'email']

    # Generate the fake data based on selected or default categories
    data = {category: category_to_faker[category]() for category in selected_categories if category in category_to_faker}
    
    
    # Generate a string representation of the data
    data_str = '\n'.join(f'{key}: {value}' for key, value in data.items())
    data_bytes = io.BytesIO(data_str.encode('utf-8'))
    data_bytes.seek(0)

    # HTML form for selecting categories to generate
    form_html = '''
    <form method="post">
        <label>Select categories of data to generate:</label><br>
        ''' + ''.join([f'<input type="checkbox" name="category" value="{category}"> {category.capitalize()}<br>' for category in category_to_faker.keys()]) + '''
        <input type="submit" value="Generate">
    </form>
    '''

    # HTML to display generated data (as text) and a download link
    data_display_html = f'<p><pre>{data_str}</pre></p><a href="/download_fake_data?data={data_str}">Download Data as File</a>'

    # Combine everything into a single HTML page
    return f'''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Generate Fake Data</title>
        {common_style}
    </head>
    <body>
        {navbar_html}
        <div class="container">
            <div class="content">
                <h1>Generate Fake Data</h1>
                {form_html}
                {data_display_html if request.method == 'POST' else ''}
            </div>
        </div>
    </body>
    </html>
    '''
@app.route('/download_fake_data')
def download_fake_data():
    data = request.args.get('data', 'No data provided')
    data_bytes = io.BytesIO(data.encode('utf-8'))
    data_bytes.seek(0)
    return send_file(data_bytes, as_attachment=True, download_name="fake_data.txt", mimetype='text/plain')

if __name__ == '__main__':
    os.makedirs('converted_images', exist_ok=True) 
    app.run(debug=True)